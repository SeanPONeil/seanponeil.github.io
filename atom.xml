<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sean O'Neil]]></title>
  <link href="http://SeanPONeil.github.com/atom.xml" rel="self"/>
  <link href="http://SeanPONeil.github.com/"/>
  <updated>2012-09-13T18:28:40-04:00</updated>
  <id>http://SeanPONeil.github.com/</id>
  <author>
    <name><![CDATA[Sean O'Neil]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sexy Solarized Bash Prompt]]></title>
    <link href="http://SeanPONeil.github.com/blog/2012/09/13/sexy-solarized-bash-prompt/"/>
    <updated>2012-09-13T16:11:00-04:00</updated>
    <id>http://SeanPONeil.github.com/blog/2012/09/13/sexy-solarized-bash-prompt</id>
    <content type="html"><![CDATA[<p>As you can already tell from this site, I have a love affair with
<a href="http://ethanschoonover.com/solarized">Solarized</a>, and I will defend The
Perfect Color Scheme until The More Perfect Color Scheme comes out. In
the mean time, however, I&#8217;ve been working on making my shell more
Solarized friendly. Enter Sexy Bash Prompt:</p>

<p><img src="http://SeanPONeil.github.com/images/sexybashprompt.png"></p>

<p>For anyone who finds themselves typing pwd or git branch a little bit
too much, this bash customization is a lifesaver. The only caveat: the
color scheme is not The Perfect Color Scheme. Enter Sexy Solarized Bash
Prompt:</p>

<div><script src='https://gist.github.com/3717199.js?file='></script>
<noscript><pre><code># Sexy Solarized Bash Prompt, inspired by &quot;Extravagant Zsh Prompt&quot;
# Customized for the Solarized color scheme by Sean O'Neil

if [[ $COLORTERM = gnome-* &amp;&amp; $TERM = xterm ]]  &amp;&amp; infocmp gnome-256color &gt;/dev/null 2&gt;&amp;1; then TERM=gnome-256color; fi
if tput setaf 1 &amp;&gt; /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2&gt;/dev/null; then
      BASE03=$(tput setaf 234)
      BASE02=$(tput setaf 235)
      BASE01=$(tput setaf 240)
      BASE00=$(tput setaf 241)
      BASE0=$(tput setaf 244)
      BASE1=$(tput setaf 245)
      BASE2=$(tput setaf 254)
      BASE3=$(tput setaf 230)
      YELLOW=$(tput setaf 136)
      ORANGE=$(tput setaf 166)
      RED=$(tput setaf 160)
      MAGENTA=$(tput setaf 125)
      VIOLET=$(tput setaf 61)
      BLUE=$(tput setaf 33)
      CYAN=$(tput setaf 37)
      GREEN=$(tput setaf 64)
    else
      BASE03=$(tput setaf 8)
      BASE02=$(tput setaf 0)
      BASE01=$(tput setaf 10)
      BASE00=$(tput setaf 11)
      BASE0=$(tput setaf 12)
      BASE1=$(tput setaf 14)
      BASE2=$(tput setaf 7)
      BASE3=$(tput setaf 15)
      YELLOW=$(tput setaf 3)
      ORANGE=$(tput setaf 9)
      RED=$(tput setaf 1)
      MAGENTA=$(tput setaf 5)
      VIOLET=$(tput setaf 13)
      BLUE=$(tput setaf 4)
      CYAN=$(tput setaf 6)
      GREEN=$(tput setaf 2)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    # Linux console colors. I don't have the energy
    # to figure out the Solarized values
    MAGENTA=&quot;\033[1;31m&quot;
    ORANGE=&quot;\033[1;33m&quot;
    GREEN=&quot;\033[1;32m&quot;
    PURPLE=&quot;\033[1;35m&quot;
    WHITE=&quot;\033[1;37m&quot;
    BOLD=&quot;&quot;
    RESET=&quot;\033[m&quot;
fi

parse_git_dirty () {
  [[ $(git status 2&gt; /dev/null | tail -n1) != &quot;nothing to commit (working directory clean)&quot; ]] &amp;&amp; echo &quot;*&quot;
}
parse_git_branch () {
  git branch --no-color 2&gt; /dev/null | sed -e '/^[^*]/d' -e &quot;s/* \(.*\)/\1$(parse_git_dirty)/&quot;
}

PS1=&quot;\[${BOLD}${CYAN}\]\u \[$BASE0\]at \[$CYAN\]\h \[$BASE0\]in \[$BLUE\]\w\[$BASE0\]\$([[ -n \$(git branch 2&gt; /dev/null) ]] &amp;&amp; echo \&quot; on \&quot;)\[$YELLOW\]\$(parse_git_branch)\[$BASE0\]\n\$ \[$RESET\]&quot;
</code></pre></noscript></div>


<p>The entire color scheme is present for both 256 color mode and 16 color
mode. The colors that are actually used in the new bash prompt can be
changed or rearranged at the last line of the file. To use it, copy the
code above into ~/.bash_prompt and source it. The final result will look
something like this:</p>

<p><img src="http://SeanPONeil.github.com/images/sexysolarized.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Holo Design]]></title>
    <link href="http://SeanPONeil.github.com/blog/2012/08/26/holo-design/"/>
    <updated>2012-08-26T13:46:00-04:00</updated>
    <id>http://SeanPONeil.github.com/blog/2012/08/26/holo-design</id>
    <content type="html"><![CDATA[<p>Ever since Google published their official <a href="http://developer.android.com/design/index.html">Design</a> documentation, it has been fun to see developers tweak the different Holo themes to fit their app&#8217;s look and feel. One of my favorites is Mobiata&#8217;s <a href="https://play.google.com/store/apps/details?id=com.mobiata.flighttrack.free&amp;hl=en">FlightTrack Free</a>:</p>

<p><img src="http://24.media.tumblr.com/tumblr_m8oliwGDGO1r2wjwko1_1280.png" width="298" height="470">
<img src="http://24.media.tumblr.com/tumblr_m8oliwGDGO1r2wjwko2_1280.png" width="298" height="470"></p>

<p>They followed the guidelines fairly strictly, staying away from any custom or iOS-like navigation elements. They strayed from the guidelines, however, when it came to theming. Their take on the Holo theme doesn&#8217;t look out of place on Android, but still stands out from the other strictly Holo apps out there and manages to capture the FlightTrack brand perfectly. Major props to everyone at Mobiata.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Brave New World]]></title>
    <link href="http://SeanPONeil.github.com/blog/2012/08/22/hello-brave-new-world/"/>
    <updated>2012-08-22T15:53:00-04:00</updated>
    <id>http://SeanPONeil.github.com/blog/2012/08/22/hello-brave-new-world</id>
    <content type="html"><![CDATA[<p>Here goes nothing. I&#8217;ve wanted to mess around with <a href="http://jekyllrb.com/" title="Jekyll">Jekyll</a> and <a href="http://octopress.org/" title="Octopress">Octopress</a> for a while, but every time I tried them out I would run into some bizarre Ruby environment issue, or Ruby would magically disappear from my path, or some other Act of God would intervene. Nevertheless, Octopress turned out to be dead simple to deploy to Github Pages once Ruby was functional.</p>

<p>I&#8217;m going to try to use this blog as a brain dump of sorts, so expect a lot of programming tidbits that won&#8217;t fit in a gist.</p>
]]></content>
  </entry>
  
</feed>
